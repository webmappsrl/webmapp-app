name: Check Submodules Changes

on:
  push:
    branches:
      - '**' # si attiva su tutti i branch

jobs:
  check-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Check Submodules Changes
        id: check_submodules
        run: |
          set -e
          # Trova i submodules modificati
          SUBMODULE_PATHS=$(git diff --cached --submodule=log HEAD^ HEAD | grep 'Submodule' | awk '{print $2}')
          if [ -z "$SUBMODULE_PATHS" ]; then
            echo "submodule_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "submodule_changes=true" >> $GITHUB_OUTPUT
          LOGS=""
          for SUBMODULE in $SUBMODULE_PATHS; do
            # Estrai old e new commit
            OLD_NEW=$(git diff --cached --submodule=log HEAD^ HEAD | grep "$SUBMODULE" | grep 'Submodule' | awk '{print $4,$6}')
            OLD_COMMIT=$(echo $OLD_NEW | awk '{print $1}')
            NEW_COMMIT=$(echo $OLD_NEW | awk '{print $2}')
            # Clona solo il submodule
            git clone --no-checkout $(git config --file .gitmodules --get submodule.$SUBMODULE.url) tmp_submodule
            cd tmp_submodule
            git fetch origin $OLD_COMMIT $NEW_COMMIT
            LOG=$(git log --oneline $OLD_COMMIT..$NEW_COMMIT)
            cd ..
            rm -rf tmp_submodule
            LOGS+="\nSubmodule $SUBMODULE ($OLD_COMMIT â†’ $NEW_COMMIT):\n$LOG\n"
          done
          # Salva i log in output
          echo "logs<<EOF" >> $GITHUB_OUTPUT
          echo -e "$LOGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Commit Message
        if: steps.check_submodules.outputs.submodule_changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const commit_sha = context.sha;
            const commit = await github.rest.repos.getCommit({
              owner,
              repo,
              ref: commit_sha
            });
            const originalMessage = commit.data.commit.message;
            const logs = `${{ steps.check_submodules.outputs.logs }}`;
            const newMessage = `${originalMessage}\n\nLog aggiornamento submodules:${logs}`;
            await github.rest.repos.updateCommit({
              owner,
              repo,
              commit_sha,
              message: newMessage
            });
